class BasePlayer(object):
    """ An class representing a Player.

        Attributes:
            score: An integer representing the Player's current score.
            bonuses_taken_per_color: A dict of colors and the number of 1-point blocks the Player has of them. 
    """

    def __init__(self):
        """ Initializes a Player.
        """

        # Initializes member variables.
        self.score = 0
        self.bonuses_taken_per_color = {}

    def set_colors(self, colors):
        """ Initializes player colors, depending on the num_colors setting of the game.

            This function should be called in Game.py during Game initialization.

            Args:
                colors: A list of colors generated by Game.
        """

        for color in colors:
            self.bonuses_taken_per_color[color] = 0

    def evaluate_moves(self, board, legal_moves, players):
        """ Evaluates and selects an optimum move.

            Args:
                board: A nested array of Blocks.
                legal_moves: A list of legal moves.
                players: A list of players.
            Returns:
                i: An integer representing the x position of the chosen move.
                j: An integer representing the y position of the chosen move.
        """

        # Return dummy values
        return 0, 0

    def score_block(self, block):
        """ Adds block value to player score; if it is worth 1, increments color dict.

            Args:
                block: The block that the player took during their turn.
        """

        self.score += block.value

        if block.value == 1:
            self.bonuses_taken_per_color[block.color] += 1

    def pretty_print(self, vprint):
        """ Pretty-prints player's score and colors.
            
            Args:
                vprint: The intended print function.
        """

        vprint("    Score: " + str(self.score))
        vprint("    Colors: " + str(self.bonuses_taken_per_color))
